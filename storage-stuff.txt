#include <iostream>
#include <array>

template<typename Component, unsigned int S>
struct ComponentArray : std::array<Component, S> {};

template<unsigned int S, typename ... Ts>
struct Storage;

template<unsigned int S, typename T, typename ... Ts>
struct Storage<S, T, Ts...> : Storage<S, Ts...> {
    ComponentArray<T, S> value{};
};

template<unsigned int S>
struct Storage<S> {};

template<typename Component, typename StorageType>
struct StorageElement;

template<unsigned int S, typename Component, typename T, typename ... Ts>
struct StorageElement<Component, Storage<S, T, Ts...>>
        : StorageElement<Component, Storage<S, Ts...>>
{};

template<unsigned int S, typename Component, typename ... Ts>
struct StorageElement<Component, Storage<S, Component, Ts...>> {
    using storage_type = Storage<S, Component, Ts...>;
};

template<typename Component, typename StorageType>
constexpr auto& get(StorageType& storage) {
    using storage_type = typename StorageElement<Component, StorageType>::storage_type;
    return static_cast<storage_type&>(storage).value;
}

template<typename Component, typename StorageType>
constexpr auto& get_component(StorageType& storage, unsigned int n) {
    return get<Component>(storage).at(n);
}

int main() {
    Storage<10, int, float> storage{};
    return get_component<int>(storage, 0);
}
